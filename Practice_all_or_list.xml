<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, February 26, 2022, 2:01 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Practice_all_or_list" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Practice_all_or_list"
   author="Khrysis"
   id="9fc0df56fe13899c9339e53f"
   language="Lua"
   purpose="Practice all or custom list of spells/skills"
   save_state="y"
   date_written="2022-02-26 01:42:38"
   requires="5.07"
   version="1.0"
   >
<description trim="y">
<![CDATA[
dprac all : Practices All available skills

dprac list : List All available skills to be practiced

cprac custom : Compares to practice list then practices matches from the custom list of (skills/spells)

cprac list : List Custom list of (skills/spells) to be practiced (Make sure skill/spell name is exactly as on the practice list)
                      <---Ex: Bless needs to be Bless not bless etc.--->
]]>
</description>

</plugin>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="dprac help"
   enabled="y"
  >
  </alias>
  <alias
    match="custom *"
    script="custom_list"
    name="custom_list"
    enabled="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="^dprac (?&lt;cmd&gt;.*)$"
    script="prac_start"
    name="prac_start"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="^cprac (?&lt;cmd&gt;.*)$"
    script="cprac_start"
    name="cprac_start"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
</aliases>

<triggers>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="cprac_skill"
   script="cprac_skill"
   sequence="100"
   regexp="y"
   group="cprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="prac_skill"
   script="prac_skill"
   sequence="100"
   regexp="y"
   group="prac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="prac_end"
   script="prac_end"
   sequence="100"
   regexp="y"
   group="prac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="cprac_end"
   script="cprac_end"
   sequence="100"
   regexp="y"
   group="cprac_group"
   omit_from_output="n"
  >
  </trigger>
</triggers>

<script>
<![CDATA[

require "tprint"
require "serialize"
skills_count = 0
skills_found = {}
cskills_count = 0
cskills_found = {}
match_count = 0
do_practice = 0

----dprac stuff----

function prac_start (name, line, wildcards)
  local cmd = wildcards.cmd
  if cmd ~= "all" and cmd ~= "list" and cmd ~= "help" then
    Note("Invalid dprac command - try: dprac <all|list|help>")
    return
  end
  if cmd == "help" then
    OnHelp ()
    return
  end
  do_practice = 0
  if cmd == "all" then
    do_practice = 1
  end
  EnableTriggerGroup("prac_group", true)
  skills_count = 0;
  skills_found = {}
  Send("prac")
end -- prac_start

function prac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- prac_skill

function prac_end (name, line, wildcards)
  Note("Loaded " .. skills_count .. " skill/s to practice")
  EnableTriggerGroup("prac_group", false)
  -- tprint(skills_found)
  prac_all()
end -- prac_end

function prac_all ()
  if skills_count < 1 then
    Note("No skills to practice.")
    return
  end
  if do_practice == 0 then
    Note("dprac all will practice the skill/s below:")
  end
  for i,v in ipairs(skills_found) do
    if do_practice == 1 then
      Send("prac " .. v.skillname .. " full")
    else
      Note(v.skillname)
    end
  end -- for
end -- prac_all

function trim(s)
  return s:match "^%s*(.-)%s*$"
end

---cprac stuff---

function cprac_start (name, line, wildcards)
  local cmd = wildcards.cmd
  if cmd ~= "custom" and cmd ~= "list" and cmd ~= "help" then
    Note("Invalid cprac command - try: cprac <custom|list|help>")
    return
  end
  if cmd == "help" then
    OnHelp ()
    return
  end
  if cmd == "list" then
  do_practice = 0
  cprac_custom ()
  end
  if cmd == "custom" then
    match_count = 0
    do_practice = 3
  EnableTriggerGroup("cprac_group", true)
  skills_count = 0;
  skills_found = {}
  Send ("prac")
  end -- if
 end -- cprac_start

function custom_list (name, line, wildcards)
   local customskill = wildcards[1]
  if not cskills_found[customskill] then
     cskills_found[customskill] = 0
     Note("Skill added: " .. customskill)
     cskills_count = cskills_count + 1
  else
     cskills_found[customskill] = nil
     Note("Skill removed: " .. customskill)
     cskills_count = cskills_count - 1
 end -- if
  for k,v in pairs(cskills_found) do
     print(k)
 end -- for
end -- custom_list

function cprac_custom ()
  if do_practice == 0 then
    Note("There is/are " .. cskills_count .. " custom skill/s in this list")
    Note("To add or remove from this list type custom skill/spellname:")
    Note("Make sure to capitalize where needed to match the practice list")
    for k,v in pairs(cskills_found) do
    print(k)
 end -- if
end -- for
   if (do_practice == 3) then
    for k,v in pairs(skills_found) do
      if cskills_found[v.skillname] then
        Send("prac " .. v.skillname .. " full")
       end -- for
     end -- if
   end -- if
 end -- cprac_custom

function cprac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- cprac_skill

function cprac_end (name, line, wildcards)
      for k,v in pairs(skills_found) do
      if cskills_found[v.skillname] then
       match_count = match_count +1
    end -- for
  end -- if
  Note("Loaded " .. match_count .. " Custom skill/s to practice")
  EnableTriggerGroup("cprac_group", false)
  -- tprint(cskills_found)
  cprac_custom ()
end -- prac_end

function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

function OnPluginInstall ()
  ColourNote ("blue","yellow","Practice all or custom list Installed! Type dprac/cprac help for help file")
  cskills_found = {}
  assert (loadstring (GetVariable ("cskills_found") or "")) ()
  assert (loadstring (GetVariable ("cskills_count") or "")) ()
end -- function OnPluginInstall

function OnPluginSaveState ()
  SetVariable ("cskills_found", "cskills_found = " .. serialize.save_simple (cskills_found))
  SetVariable ("cskills_count", "cskills_count = " .. serialize.save_simple (cskills_count))
end -- function OnPluginSaveState

]]>
</script> 

</muclient>
