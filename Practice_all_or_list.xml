<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, February 26, 2022, 2:01 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Practice_all_or_list" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Practice_all_or_list"
   author="Khrysis"
   id="9fc0df56fe13899c9339e53f"
   language="Lua"
   purpose="Practice all or custom list of spells/skills"
   save_state="y"
   date_written="2022-02-26 01:42:38"
   requires="5.07"
   version="1.1"
   >
<description trim="y">
<![CDATA[
This plugin works well if you have went thrugh and added what you can to the forgetskill command built in the game.
Remember that's 100 slots for skills/spells you don't use that can be off the list completely.
This plugin doesnt covert trains to practices to finish the list you will have to convert them yourself.


dprac all : Practices All available skills

dprac list : List All available skills to be practiced

cprac custom : Compares to practice list then practices matches from the custom list of (skills/spells)

cprac tier : Compares to practice list then practices matches from the tlist of (skills/spells)

cprac all : Compares both tier and custom to the practice list then practices matches from both

cprac list : List custom list of (skills/spells) to be practiced when doing cprac custom
                (Make sure skill/spell name is exactly as on the practice list)
                      <---Ex: Bless needs to be Bless not bless etc.--->
                 This list can be whatever your want but the following are some ideas
                      <--- Ex: everything from the spells/skills spellup all commands --->

cprac tlist : List custom list of (skills/spells) to be practiced when doing cprac tier
                 (Make sure skill/spell name is exactly as on the practice list)
                      <--- Ex: Bless needs to be Bless not bless etc. --->
       This list is meant for putting everything u want to practice right after tier or tier redo at r1 and the follownig ideas:
                      <--- Ex: Any attack spells or skills you want to pratice at level 1 --->
                      <--- Any spellup skills/spells you would rather include here and not on the custom list --->
                      <--- Everything from the skills passive all and  skills/spells curative all commands --->
                      <--- Everything you want from spells/skills pets --->

cprac custom/tier clear: Clears the list custom or tier so that you may start over from new

]]>
</description>

</plugin>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="dprac help"
   enabled="y"
  >
  </alias>
  <alias
    match="custom *"
    script="custom_list"
    name="custom_list"
    enabled="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="tier *"
    script="tier_list"
    name="tier_list"
    enabled="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="^dprac (?&lt;cmd&gt;.*)$"
    script="prac_start"
    name="prac_start"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="^cprac (?&lt;cmd&gt;.*)$"
    script="cprac_start"
    name="cprac_start"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
</aliases>

<triggers>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="prac_skill"
   script="prac_skill"
   sequence="100"
   regexp="y"
   group="prac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="cprac_skill"
   script="cprac_skill"
   sequence="100"
   regexp="y"
   group="cprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="tprac_skill"
   script="tprac_skill"
   sequence="100"
   regexp="y"
   group="tprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="allprac_skill"
   script="allprac_skill"
   sequence="100"
   regexp="y"
   group="allprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="prac_end"
   script="prac_end"
   sequence="100"
   regexp="y"
   group="prac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="cprac_end"
   script="cprac_end"
   sequence="100"
   regexp="y"
   group="cprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="tprac_end"
   script="tprac_end"
   sequence="100"
   regexp="y"
   group="tprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="allprac_end"
   script="allprac_end"
   sequence="100"
   regexp="y"
   group="allprac_group"
   omit_from_output="n"
  >
  </trigger>
</triggers>

<script>
<![CDATA[

require "tprint"
require "serialize"
skills_count = 0
skills_found = {}
cskills_count = 0
cskills_found = {}
match_count = 0
do_practice = 0
tskills_count = 0
tskills_found = {}

----dprac stuff----

function prac_start (name, line, wildcards)
  local cmd = wildcards.cmd
  if cmd ~= "all" and cmd ~= "list" and cmd ~= "help" then
    Note("Invalid dprac command - try: dprac <all|list|help>")
    return
  end
  if cmd == "help" then
    OnHelp ()
    return
  end
  do_practice = 0
  if cmd == "all" then
    do_practice = 1
  end
  EnableTriggerGroup("prac_group", true)
  skills_count = 0;
  skills_found = {}
  Send("prac")
end -- prac_start

function prac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- prac_skill

function prac_end (name, line, wildcards)
  Note("Loaded " .. skills_count .. " skill/s to practice")
  EnableTriggerGroup("prac_group", false)
  -- tprint(skills_found)
  prac_all()
end -- prac_end

function prac_all ()
  if skills_count < 1 then
    Note("No skills to practice.")
    return
  end
  if do_practice == 0 then
    Note("dprac all will practice the skill/s below:")
  end
  for i,v in ipairs(skills_found) do
    if do_practice == 1 then
      Send("prac " .. v.skillname .. " full")
    else
      Note(v.skillname)
    end
  end -- for
end -- prac_all

function trim(s)
  return s:match "^%s*(.-)%s*$"
end

---cprac stuff---

function cprac_start (name, line, wildcards)
  local cmd = wildcards.cmd
  if cmd ~= "custom" and cmd ~= "list" and cmd ~= "help" and cmd ~= "tier" and cmd ~= "tlist" and cmd ~= "clear custom" and cmd ~= "clear tier" and cmd ~= "all" then
    Note("Invalid cprac command - try: cprac <custom|tier|list|tlist|help>")
    return
  end -- if
  if cmd == "help" then
    OnHelp ()
    return
  end -- if
  if cmd == "all" then
  match_count = 0
  do_practice = 2
  EnableTriggerGroup("allprac_group", true)
  skills_count = 0;
  skills_found = {}
  Send ("prac")
  end -- if
  if cmd == "clear custom" then
    cskills_found = {}
    cskills_count = 0
    Note("<--- custom list is clear --->")
  end -- if
  if cmd == "clear tier" then
    tskills_found = {}
    tskills_count = 0
    Note("<--- tier list is clear --->")
  end -- if
  if cmd == "list" then
  do_practice = 0
  cprac_custom ()
  end -- if
  if cmd == "tlist" then
  do_practice = 4
  cprac_custom ()
  end -- if
  if cmd == "custom" then
    match_count = 0
    do_practice = 3
  EnableTriggerGroup("cprac_group", true)
  skills_count = 0;
  skills_found = {}
  Send ("prac")
  end -- if
  if cmd == "tier" then
    match_count = 0  
    do_practice = 5
  EnableTriggerGroup("tprac_group", true)
  skills_count = 0;
  skills_found = {}
  Send ("prac")
  end -- if
 end -- cprac_start

function custom_list (name, line, wildcards)
   local customskill = wildcards[1]
  if not cskills_found[customskill] then
     cskills_found[customskill] = 0
     ColourNote("blue","yellow","Skill added: " .. customskill)
     cskills_count = cskills_count + 1
  else
     cskills_found[customskill] = nil
     ColourNote("blue","yellow","Skill removed: " .. customskill)
     cskills_count = cskills_count - 1
 end -- if
  for k,v in pairs(cskills_found) do
     print(k)
 end -- for
     ColourNote ("blue","yellow","Found " .. cskills_count .. " skill/s or spell/s")
end -- custom_list

function tier_list (name, line, wildcards)
   local tskill = wildcards[1]
  if not tskills_found[tskill] then
     tskills_found[tskill] = 0
     ColourNote("blue","yellow","Skill added: " .. tskill)
     tskills_count = tskills_count + 1
  else
     tskills_found[tskill] = nil
     ColourNote("blue","yellow","Skill removed: " .. tskill)
     tskills_count = tskills_count - 1
 end -- if
  for k,v in pairs(tskills_found) do
     print(k)
 end -- for
     ColourNote("blue","yellow","Found " .. tskills_count .. " skill/s or spell/s")
end -- tier_list

function cprac_custom ()
  if do_practice == 0 then
    ColourNote("blue","yellow","<---There is/are " .. cskills_count .. " skill/s or spell/s in this list--->")
    ColourNote("blue","yellow","To add or remove from this list type custom skill/spellname:")
    ColourNote("blue","yellow","Make sure to capitalize where needed to match the practice list")
    for k,v in pairs(cskills_found) do
    print(k)
 end -- if
end -- for
   if (do_practice == 3) then
    for k,v in pairs(skills_found) do
      if cskills_found[v.skillname] then
        Send("prac " .. v.skillname .. " full")
       end -- if
     end -- for
   end -- if
  if (do_practice == 4) then
    ColourNote("blue","yellow","<---There is/are " .. tskills_count .. " skill/s or spell/s in this list--->")
    ColourNote("blue","yellow","To add or remove from this list type tier skill/spellname:")
    ColourNote("blue","yellow","Make sure to capitalize where needed to match the practice list")
    for k,v in pairs(tskills_found) do
    print(k)
    end -- if
   end -- for
  if (do_practice == 5) then
     for k,v in pairs(skills_found) do
      if tskills_found[v.skillname] then
        Send("prac " .. v.skillname .. " full")
       end -- if
     end -- for
   end -- if
  if (do_practice == 2) then
     for k,v in pairs(skills_found) do
      if cskills_found[v.skillname] then
        Send("prac " .. v.skillname .. " full")
      elseif tskills_found[v.skillname] then
        Send("prac " .. v.skillname .. " full")
      end -- if
    end -- for
  end -- if
end -- cprac_custom

---cprac custom stuff---

function cprac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- cprac_skill

function cprac_end (name, line, wildcards)
      for k,v in pairs(skills_found) do
      if cskills_found[v.skillname] then
       match_count = match_count +1
    end -- if
  end -- for
  ColourNote("blue","yellow","Loaded " .. match_count .. " Custom skill/s to practice")
  EnableTriggerGroup("cprac_group", false)
  -- tprint(cskills_found)
  cprac_custom ()
end -- cprac_end

---cprac tier stuff---

function tprac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- tprac_skill

function tprac_end (name, line, wildcards)
      for k,v in pairs(skills_found) do
      if tskills_found[v.skillname] then
       match_count = match_count +1
    end -- if
  end -- for
  ColourNote("blue","yellow","Loaded " .. match_count .. " tier skill/s to practice")
  EnableTriggerGroup("tprac_group", false)
  -- tprint(tskills_found)
  cprac_custom ()
end -- tprac_end

---all prac stuff---

function allprac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- allprac_skill

function allprac_end (name, line, wildcards)
      for k,v in pairs(skills_found) do
      if tskills_found[v.skillname] then
       match_count = match_count +1
    end -- if
     if cskills_found[v.skillname] then
       match_count = match_count +1
    end -- if
  end -- for
  ColourNote("blue","yellow","Loaded " .. match_count .. " skill/s to practice")
  EnableTriggerGroup("allprac_group", false)
  -- tprint(matched_both_list_skills_found)
  cprac_custom ()
end -- allprac_end


function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

function OnPluginInstall ()
  ColourNote ("blue","yellow","Practice all or custom list Installed! Type dprac/cprac help for help file")
  cskills_found = {}
  tskills_found = {}
  assert (loadstring (GetVariable ("cskills_found") or "")) ()
  assert (loadstring (GetVariable ("cskills_count") or "")) ()
  assert (loadstring (GetVariable ("tskills_found") or "")) ()
  assert (loadstring (GetVariable ("tskills_count") or "")) ()
end -- function OnPluginInstall

function OnPluginSaveState ()
  SetVariable ("cskills_found", "cskills_found = " .. serialize.save_simple (cskills_found))
  SetVariable ("cskills_count", "cskills_count = " .. serialize.save_simple (cskills_count))
  SetVariable ("tskills_found", "tskills_found = " .. serialize.save_simple (tskills_found))
  SetVariable ("tskills_count", "tskills_count = " .. serialize.save_simple (tskills_count))
end -- function OnPluginSaveState

]]>
</script> 

</muclient>
