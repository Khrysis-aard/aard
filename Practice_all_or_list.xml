<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, February 26, 2022, 2:01 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Practice_all_or_list" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Practice_all_or_list"
   author="Khrysis"
   id="9fc0df56fe13899c9339e53f"
   language="Lua"
   purpose="Practice all or custom list of spells/skills"
   save_state="y"
   date_written="2022-02-26 01:42:38"
   requires="5.07"
   version="1.03"
   >

</plugin>

<aliases>
  <alias 
  match="pal update check" 
  enabled="y" 
  script="update_check_alias" 
  sequence="99"
  >
  </alias>
  
  <alias 
  match="pal update install" 
  enabled="y" 
  script="update_install_alias" 
  sequence="99"
  >
  </alias>
  <alias
   script="OnHelp"
   match="dprac help"
   enabled="y"
  >
  </alias>
  <alias
    match="custom *"
    script="custom_list"
    name="custom_list"
    enabled="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="tier *"
    script="tier_list"
    name="tier_list"
    enabled="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="^dprac (?&lt;cmd&gt;.*)$"
    script="prac_start"
    name="prac_start"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="^cprac (?&lt;cmd&gt;.*)$"
    script="cprac_start"
    name="cprac_start"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
</aliases>

<triggers>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="prac_skill"
   script="prac_skill"
   sequence="100"
   regexp="y"
   group="prac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="cprac_skill"
   script="cprac_skill"
   sequence="100"
   regexp="y"
   group="cprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="tprac_skill"
   script="tprac_skill"
   sequence="100"
   regexp="y"
   group="tprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?&lt;skill&gt;[^\d-]+)(\d|-).*$"
   name="allprac_skill"
   script="allprac_skill"
   sequence="100"
   regexp="y"
   group="allprac_group"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="prac_end"
   script="prac_end"
   sequence="100"
   regexp="y"
   group="prac_group"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="cprac_end"
   script="cprac_end"
   sequence="100"
   regexp="y"
   group="cprac_group"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="tprac_end"
   script="tprac_end"
   sequence="100"
   regexp="y"
   group="tprac_group"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^See 'help learned' for better ways to list skill/spell proficiency.$"
   name="allprac_end"
   script="allprac_end"
   sequence="100"
   regexp="y"
   group="allprac_group"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^There is nobody here to help you practice\.$"
   sequence="100"
   send_to="12"
   regexp="y"
   group="omits_n_total_prac"
   omit_from_output="y"
  >
  <send>noprac = 1
        SendNoEcho ("echo @C...@cCannot practice here@C...")
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^It will cost you (.+) practices to increase (.+) to 95\%\.$"
   omit_from_output="y"
   script="save_val_to_add"
   sequence="100"
   regexp="y"
   send_to="12"
   group="omits_n_total_prac"
  >
  <send>prac_number = %1
        prac_count = 0</send>
  </trigger>
  <trigger
   enabled="n"
   match="^You only have (.+) practice (session|sessions) available\.$"
   omit_from_output="y"
   sequence="100"
   regexp="y"
   group="omits_n_total_prac"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^You have no practice sessions available\.$"
   omit_from_output="y"
   sequence="100"
   regexp="y"
   group="omits_n_total_prac"
  >
  </trigger>
  <trigger
   enabled="n"
   match="...Finished Practicing..."
   script="end_function"
   sequence="100"
   group="omits_n_total_prac"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(Level [\d\s]+:)?\s+?(\w+[\s\w]+\w)\s+?(\d+)\s+?(\d+)%\s+?(\d+)$"
   omit_from_output="y"
   script="add_spellup"
   regexp="y"
   sequence="100"
   send_to="12"
   group="add_spells_skills"
   >
  <send>spl = ("%2")</send>
  </trigger>
  <trigger
   enabled="n"
   match="^(Level [\d\s]+:)?\s+?(\w+[\s\w]+\w+)\s+(N\/A)\s+$"
   omit_from_output="y"
   script="add_spellup"
   regexp="y"
   sequence="100"
   send_to="12"
   group="add_spells_skills"
   >
  <send>spl = ("%2")</send>
  </trigger>
  <trigger
   enabled="n"
   match="^(Level [\d\s]+:)?\s+?(\w+[\s\w]+\w)\s+?(\d+)%$"
   omit_from_output="y"
   script="add_spellup"
   regexp="y"
   sequence="100"
   send_to="12"
   group="add_spells_skills"
   >
  <send>spl = ("%2")</send>
  </trigger>
  <trigger
   enabled="n"
   match="^(Level [\d\s]+:)?\s+?(\w+[\s\w]+\w)\s+(N\/A)\s+$"
   omit_from_output="y"
   script="add_spellup"
   regexp="y"
   sequence="100"
   send_to="12"
   group="add_spells_skills"
   >
  <send>spl = ("%2")</send>
  </trigger>
  <trigger
   enabled="n"
   match="^.*$"
   regexp="y"
   sequence="110"
   omit_from_output="y"
   group="add_spells_skills"
  >
  </trigger>
  <trigger
   enabled="n"
   match="Adding...Spells and Skills..."
   script="spellup_end"
   sequence="100"
   group="add_spells_skills"
   >
  </trigger>
  <trigger
   enabled="n"
   match="...cprac spellup enabled/disabled?"
   script="spellup_enabled_disabled"
   sequence="100"
   group="enabled_disabled"
   omit_from_output="y"
   >
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   match="^INFO\: (.+) has been reborn as (a|an) (.+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>require 'gmcphelper'

  local name = gmcp("char.base.name")
  local player = "%1"
   if name == player then
    EnableTriggerGroup ("add_spells_skills", true)
    SendNoEcho ("spells spellup all")
    SendNoEcho ("skills spellup all")
    SendNoEcho ("spells curative all")
    SendNoEcho ("skills curative all")
    SendNoEcho ("skills movement all")
    SendNoEcho ("skills passive all")
    SendNoEcho ("echo @cAdding@C...@cSpells and Skills@C...")
   update_spl = 0
  end</send>
  </trigger>
</triggers>

<script>
<![CDATA[

require "tprint"
require "serialize"
skills_count = 0
skills_found = {}
cskills_count = 0
cskills_found = {}
match_count = 0
do_practice = 0
tskills_count = 0
tskills_found = {}
prac_count = 0
prac_new_count = 0
spellup = {}
spell_count = 0
togspell = 0
noprac = 0
update_spl = 0

----dprac stuff----

function prac_start (name, line, wildcards)
  local cmd = wildcards.cmd
  if cmd ~= "all" and cmd ~= "list" and cmd ~= "help" then
    Note("Invalid dprac command - try: dprac <all|list|help>")
    return
  end
  if cmd == "help" then
    OnHelp ()
    return
  end
  do_practice = 0
  if cmd == "all" then
    do_practice = 1
    prac_new_count = 0
    prac_count = 0
    noprac = 0
  end
  EnableTriggerGroup("prac_group", true)
  skills_count = 0;
  skills_found = {}
  SendNoEcho("prac")
end -- prac_start

function prac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- prac_skill

function prac_end (name, line, wildcards)
  ColourNote("yellow","","Loaded " .. skills_count .. " skill/s to practice")
  EnableTriggerGroup("prac_group", false)
  -- tprint(skills_found)
  prac_all()
end -- prac_end

function prac_all ()
  if skills_count < 1 then
    return
  end
  if do_practice == 0 then
    ColourNote("yellow","","dprac all will practice the skill/s below:")
   for i,v in ipairs(skills_found) do
    Note(v.skillname)
   end --if
 end -- for
    if do_practice == 1 then
   for i,v in ipairs(skills_found) do
      SendNoEcho("prac " .. v.skillname .. " full")
   EnableTriggerGroup ("omits_n_total_prac", true)
    end -- if
   SendNoEcho("echo @C...@cFinished Practicing@C...")
  end -- for
end -- prac_all

function trim(s)
  return s:match "^%s*(.-)%s*$"
end

---cprac stuff---

function cprac_start (name, line, wildcards)
  local cmd = wildcards.cmd
  if cmd ~= "custom" and cmd ~= "list" and cmd ~= "help" and cmd ~= "tier" and cmd ~= "tlist" and cmd ~= "clear custom" and cmd ~= "clear tier" and cmd ~= "all" and cmd ~= "spellup" and cmd ~= "clear spellup" and cmd ~= "slist" then
    Note("Invalid cprac command - try: cprac <custom|tier|spellup|list|tlist|slist|help>")
    return
  end -- if
  if cmd == "help" then
    OnHelp ()
    return
  end -- if
  if cmd == "spellup" then
  if togspell == 0 then
     togspell = 1
    ColourNote ("red","","Spellup Curative Movement Passive spells/skills enabled")
    EnableTriggerGroup ("add_spells_skills", true)
    SendNoEcho ("spells spellup all")
    SendNoEcho ("skills spellup all")
    SendNoEcho ("spells curative all")
    SendNoEcho ("skills curative all")
    SendNoEcho ("skills movement all")
    SendNoEcho ("skills passive all")
    SendNoEcho ("echo @cAdding@C...@cSpells and Skills@C...")
  else togspell = 0
    ColourNote ("red","","Spellup Curative Movement Passive spells/skills disabled")
   end -- if
 end -- if spellup
  if cmd == "slist" then
    spellup_list ()
 end -- if spellup_list
  if cmd == "clear spellup" then
   spellup = {}
   spell_count = 0
    ColourNote("yellow","","<--- spellup list is clear --->")
 end -- if clear spellup
  if cmd == "all" then
   prac_count = 0
   prac_new_count = 0
   match_count = 0
   do_practice = 2
   noprac = 0
   EnableTriggerGroup("allprac_group", true)
   skills_count = 0;
   skills_found = {}
    SendNoEcho ("prac")
  end -- if
  if cmd == "clear custom" then
    cskills_found = {}
    cskills_count = 0
    ColourNote("yellow","","<--- custom list is clear --->")
  end -- if
  if cmd == "clear tier" then
    tskills_found = {}
    tskills_count = 0
    ColourNote("yellow","","<--- tier list is clear --->")
  end -- if
  if cmd == "list" then
  do_practice = 0
  cprac_custom ()
  end -- if
  if cmd == "tlist" then
  do_practice = 4
  cprac_custom ()
  end -- if
  if cmd == "custom" then
    prac_count = 0
    prac_new_count = 0
    match_count = 0
    do_practice = 3
    noprac = 0
  EnableTriggerGroup("cprac_group", true)
  skills_count = 0;
  skills_found = {}
  SendNoEcho ("prac")
  end -- if
  if cmd == "tier" then
    prac_count = 0
    prac_new_count = 0
    match_count = 0  
    do_practice = 5
    noprac = 0
  EnableTriggerGroup("tprac_group", true)
  skills_count = 0;
  skills_found = {}
  SendNoEcho ("prac")
  end -- if
 end -- cprac_start

function custom_list (name, line, wildcards)
   local customskill = wildcards[1]
  if not cskills_found[customskill] then
     cskills_found[customskill] = 0
     ColourNote("red","","Custom list skill added: " .. customskill)
     cskills_count = cskills_count + 1
  else
     cskills_found[customskill] = nil
     ColourNote("red","","Custom list skill removed: " .. customskill)
     cskills_count = cskills_count - 1
 end -- if
     ColourNote ("yellow","","Found " .. cskills_count .. " skill/s or spell/s")
end -- custom_list

function tier_list (name, line, wildcards)
   local tskill = wildcards[1]
  if not tskills_found[tskill] then
     tskills_found[tskill] = 0
     ColourNote("red","","Tier list skill added: " .. tskill)
     tskills_count = tskills_count + 1
  else
     tskills_found[tskill] = nil
     ColourNote("red","","Tier list skill removed: " .. tskill)
     tskills_count = tskills_count - 1
 end -- if
     ColourNote("yellow","","Found " .. tskills_count .. " skill/s or spell/s")
end -- tier_list

function cprac_custom ()
  if do_practice == 0 then
    for k,v in pairs(cskills_found) do
    print(k)
 end -- if
    ColourNote("cyan","","" .. cskills_count .. " skill/s or spell/s in clist")
    ColourNote("cyan","","To add/remove type custom skill/spellname")
  end -- for
   if (do_practice == 3) then
    for k,v in pairs(skills_found) do
      if cskills_found[v.skillname] then
        SendNoEcho("prac " .. v.skillname .. " full")
      elseif spellup[v.skillname] then
        SendNoEcho("prac " .. v.skillname .. " full")
       end -- if
     end -- for
   SendNoEcho("echo @C...@cFinished Practicing@C...")
   end -- if
  if (do_practice == 4) then
    for k,v in pairs(tskills_found) do
    print(k)
  end -- if
    ColourNote("cyan","","" .. tskills_count .. " skill/s or spell/s in tlist")
    ColourNote("cyan","","To add/remove from type tier skill/spellname")
   end -- for
    if (do_practice == 5) then
     for k,v in pairs(skills_found) do
      if tskills_found[v.skillname] then
        SendNoEcho("prac " .. v.skillname .. " full")
      elseif spellup[v.skillname] then
        SendNoEcho("prac " .. v.skillname .. " full")
       end -- if
     end -- for
   SendNoEcho("echo @C...@cFinished Practicing@C...")
   end -- if
  if (do_practice == 2) then
     for k,v in pairs(skills_found) do
      if cskills_found[v.skillname] then
        SendNoEcho("prac " .. v.skillname .. " full")
      elseif tskills_found[v.skillname] then
        SendNoEcho("prac " .. v.skillname .. " full")
      elseif spellup[v.skillname] then
        SendNoEcho("prac " .. v.skillname .. " full")
      end -- if
    end -- for
   SendNoEcho("echo @C...@cFinished Practicing@C...")
  end -- if
end -- cprac_custom

---cprac custom stuff---

function cprac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- cprac_skill

function cprac_end (name, line, wildcards)
      for k,v in pairs(skills_found) do
      if cskills_found[v.skillname] then
       match_count = match_count + 1
    end -- if
      if spellup[v.skillname] and togspell == 1 then
       match_count = match_count + 1
    end -- if
  end -- for
  ColourNote("yellow","","Loaded " .. match_count .. " Custom skill/s to practice")
  EnableTriggerGroup("cprac_group", false)
    if match_count < 1 then
    return
    end -- test for count
  EnableTriggerGroup ("omits_n_total_prac", true)
  -- tprint(cskills_found)
  cprac_custom ()
end -- cprac_end

---cprac tier stuff---

function tprac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- tprac_skill

function tprac_end (name, line, wildcards)
      for k,v in pairs(skills_found) do
      if tskills_found[v.skillname] then
       match_count = match_count + 1
     end -- if 
      if spellup[v.skillname] and togspell == 1 then
       match_count = match_count + 1
    end -- if
  end -- for
  ColourNote("yellow","","Loaded " .. match_count .. " tier skill/s to practice")
  EnableTriggerGroup("tprac_group", false)
    if match_count < 1 then
    return
    end -- test for count
  EnableTriggerGroup ("omits_n_total_prac", true)
  -- tprint(tskills_found)
  cprac_custom ()
end -- tprac_end

---all prac stuff---

function allprac_skill (name, line, wildcards)
  --  Wrath of god              166     1%
  -- Note(wildcards.skill)
  skill = trim(wildcards.skill)
  -- Note(skill)
  -- You have 62 training sessions available.
  -- You have 162 practice sessions available.
  if skill == "You have" then
    return
  end
  table.insert(skills_found, {skillname=skill})
  skills_count = skills_count + 1
end -- allprac_skill

function allprac_end (name, line, wildcards)
      for k,v in pairs(skills_found) do
      if tskills_found[v.skillname] then
       match_count = match_count + 1
    end -- if
     if cskills_found[v.skillname] then
       match_count = match_count + 1
    end -- if
     if spellup[v.skillname] and togspell == 1 then
       match_count = match_count + 1
    end -- if
  end -- for
  ColourNote("yellow","","Loaded " .. match_count .. " skill/s to practice")
  EnableTriggerGroup("allprac_group", false)
    if match_count < 1 then
    return
    end -- test for count
  EnableTriggerGroup ("omits_n_total_prac", true)
  -- tprint(matched_both_list_skills_found)
  cprac_custom ()
end -- allprac_end

---- add spellup spells/skills to table to toggle on/off

function add_spellup (name, wildcards)
  if not spellup[spl] then
    spellup[spl] = 0
   spell_count = spell_count + 1
 end -- if
end -- add_spellup

function spellup_list ()
  for k,v in pairs(spellup) do
 print (k)
  end -- for
 ColourNote ("cyan","","" .. spell_count .. " spells/skills found")
 ColourNote ("cyan","","To refresh manually type cprac spellup to disable then again to enable and refresh")
end -- spellup_list

function spellup_end ()
 ColourNote ("cyan","","" .. spell_count .. " Spells and Skills added")
  EnableTriggerGroup ("add_spells_skills", false)
end -- print_spellup

function save_val_to_add ()
   prac_count = prac_number + prac_new_count
   prac_new_count = prac_count
end -- save_val_to_add

function end_function ()
      if noprac > 0 then
        EnableTriggerGroup ("omits_n_total_prac", false)
       return
     end -- if
  ColourNote ("yellow","","You need " .. prac_new_count .. " practices to complete the list.")
  EnableTriggerGroup ("omits_n_total_prac", false)
end -- end_function

function spellup_enabled_disabled ()
            if update_spl == 1 and togspell == 1 then
         ColourNote("red","","Spellup Curative Movement Passive spells/skills is already enabled")
    end -- if
            if update_spl == 1 and togspell == 0 then
         ColourNote("red","","Spellup Curative Movement Passive spells/skills disabled")
         ColourNote("red","","To enable type cprac spellup")
    end -- if
         EnableTriggerGroup ("enabled_disabled", false)
 end -- spellup_enabled_disabled

function OnPluginBroadcast (msg, id, name, text)
      if (id == '3e7dedbe37e44942dd46d264') then
            if (text == 'comm.tick') then
            if update_spl == 0 then
               EnableTriggerGroup ("add_spells_skills", true)
               EnableTriggerGroup ("enabled_disabled", true)
               SendNoEcho ("spells spellup all")
               SendNoEcho ("skills spellup all")
               SendNoEcho ("spells curative all")
               SendNoEcho ("skills curative all")
               SendNoEcho ("skills movement all")
               SendNoEcho ("skills passive all")
               SendNoEcho ("echo @R...cprac spellup enabled/disabled?")
               SendNoEcho ("echo @cAdding@C...@cSpells and Skills@C...")
                 update_spl = 1
         end -- if
      end -- if
   end -- if
end -- OnPluginBroadcast

function OnHelp ()
  ColourNote("blue","","-----------------------------------------------------------------------------------------------------------")
  ColourNote("blue","","|","green",""," Utilize the forgetskill command for samespells or other things you want to hide from the practice list. ","blue","","|")
  ColourNote("blue","","|","green",""," You can add 100 spells/skills to the forgetskill list built into game.                                  ","blue","","|")
  ColourNote("blue","","|","green",""," This plugin doesnt covert trains to practices to finish the list you will have to convert them yourself.","blue","","|")
  ColourNote("blue","","-----------------------------------------------------------------------------------------------------------")
  ColourNote("blue","","|","cyan",""," pal update check :","yellow",""," Check for update                                                                     ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," pal update install :","yellow",""," Install new update                                                                 ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," dprac all :","yellow",""," Practices All available skills                                                              ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," dprac list :","yellow",""," List All available skills to be practiced                                                  ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," cprac custom :","yellow",""," Practices matches from cprac list of skills/spells and spellup if enabled                ","blue","","|")
  ColourNote("blue","","|","yellow","","                This list is meant for whatever you want really heals, pets, attack spells etc..         ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," cprac tier :","yellow",""," Practices matches from cprac tlist of skills/spells and spellup if enabled                 ","blue","","|")
  ColourNote("blue","","|","yellow","","              This list is meant for what you want to practice when you hit a new tier and are R1        ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," cprac all :","yellow",""," Practices matches from both cprac list/tlist and spellup if enabled                         ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," cprac list/tlist/slist :","yellow",""," List custom/tier/spellup lists with total on list                              ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," cprac clear custom/tier/spellup :","yellow",""," Clears the list custom/tier/spellup                                   ","blue","","|")
  ColourNote("blue","","|                                                                                                         |")
  ColourNote("blue","","|","cyan",""," cprac spellup :","yellow",""," toggles on/off                                                                          ","blue","","|")
  ColourNote("blue","","|","yellow","","                 Adds skills/spells spellup, curative, passive, movement all                             ","blue","","|")
  ColourNote("blue","","|","yellow","","                 Refreshes with what is currently available when toggled/entering game/tier              ","blue","","|")
  ColourNote("blue","","|","yellow","","                 Works with cprac tier/custom/all   Defaults to on                                       ","blue","","|")
  ColourNote("blue","","-----------------------------------------------------------------------------------------------------------")
  ColourNote("blue","","|","cyan",""," To add/remove list/tlist :","yellow",""," type custom skill/spellname or type tier skill/spellname                     ","blue","","|")
  ColourNote("blue","","|","yellow","","                            Ex: custom Bless adds Bless to the list and doing it again removes it        ","blue","","|")
  ColourNote("blue","","|","yellow","","                            Ex: tier Bless adds Bless to the list and doing it again removes it          ","blue","","|")
  ColourNote("blue","","|","yellow","","                            Skill/Spell must match exactly as the practice list shows                    ","blue","","|")
  ColourNote("blue","","|","yellow","","                            Ex: Bless needs to be Bless not bless etc.                                   ","blue","","|")
  ColourNote("blue","","-----------------------------------------------------------------------------------------------------------")
end -- OnHelp

function OnPluginDisconnect ()
  update_spl = 0
end -- OnPluginDisconnect

function OnPluginInstall ()
  ColourNote ("blue","yellow","Practice all or custom list Installed! Type dprac/cprac help for help file")
  cskills_found = {}
  tskills_found = {}
  spellup = {}
  assert (loadstring (GetVariable ("spell_count") or "")) ()
  assert (loadstring (GetVariable ("togspell") or "")) ()
  assert (loadstring (GetVariable ("spellup") or "")) ()
  assert (loadstring (GetVariable ("cskills_found") or "")) ()
  assert (loadstring (GetVariable ("cskills_count") or "")) ()
  assert (loadstring (GetVariable ("tskills_found") or "")) ()
  assert (loadstring (GetVariable ("tskills_count") or "")) ()
end -- function OnPluginInstall

function OnPluginSaveState ()
  SetVariable ("spell_count", "spell_count = " .. serialize.save_simple (spell_count))
  SetVariable ("togspell", "togspell = " .. serialize.save_simple (togspell))
  SetVariable ("spellup", "spellup = " .. serialize.save_simple (spellup))
  SetVariable ("cskills_found", "cskills_found = " .. serialize.save_simple (cskills_found))
  SetVariable ("cskills_count", "cskills_count = " .. serialize.save_simple (cskills_count))
  SetVariable ("tskills_found", "tskills_found = " .. serialize.save_simple (tskills_found))
  SetVariable ("tskills_count", "tskills_count = " .. serialize.save_simple (tskills_count))
end -- function OnPluginSaveState

 ----------------------- Plugin Update Code -----------------------
 -- Code taken from Durel's dinv plugin, originally via Crowley
 require("wait")
require("async")
json = require("json")

 plugin_url = "https://raw.githubusercontent.com/Khrysis-aard/plugins/refs/heads/main/Practice_all_or_list.xml"
 SetVariable("DownloadURL", plugin_url)
 plugin_protocol = "HTTPS"
 plugin_prefix = "[Practice_all_or_list]"
 
 function update_check_alias()
     update_plugin("check")
     ColourNote("yellow", "", plugin_prefix .. "","white",""," Checking for updated version...")
 end
 
 function update_install_alias()
     update_plugin("install")
     ColourNote("yellow", "", plugin_prefix .. "","white",""," Checking for and installing updated version...")
 end
 
 function reload_plugin()
     local scriptPrefix = GetAlphaOption("script_prefix")
     local retval
 
     -- If the user has not already specified the script prefix for this version of mush, pick a
     -- reasonable default value
     if (scriptPrefix == "") then
         scriptPrefix = "\\\\\\"
         SetAlphaOption("script_prefix", scriptPrefix)
     end
 
     -- Tell mush to reload the plugin in one second.  We can't do it directly here because a
     -- plugin can't unload itself.  Even if it could, how could it tell mush to load it again
     -- if it weren't installed? 
     retval = Execute(scriptPrefix.."DoAfterSpecial(0.1, \"ReloadPlugin('"..GetPluginID().."')\", sendto.script)")
 end
 
 function update_plugin(mode)
     update_mode = mode
 
     wait.make(get_plugin_file)
 end
 
 function get_plugin_file()
     local urlThread = async.request(plugin_url, plugin_protocol)
 
     if not urlThread then
         note_error("Couldn't create async url request.")
         return
     end
 
     local timeout = 10
     local totTime = 0
     while (urlThread:alive() and totTime < timeout) do
         wait.time(0.1)
         totTime = totTime + 0.1
     end
 
     local remoteRet, pluginData, status, headers, fullStatus = urlThread:join()
 
     if not status then
         ColourNote("red", "", plugin_prefix .. " Couldn't download plugin file. No status code.")
         
         return
     end
 
     if (status ~= 200) then
         ColourNote("red", "", plugin_prefix .. " Plugin file request status code: " .. status .. ": " .. fullStatus)
         return
     end
     
     local currentVersion = GetPluginInfo(GetPluginID(), 19) or 0
     local currentVerStr  = string.format("%1.3f", currentVersion)
     local remoteVerStr   = string.match(pluginData, '%s%s+version="([0-9%.]+)"')
     local remoteVersion  = tonumber(remoteVerStr or "") or 0
 
     if remoteVersion == currentVersion then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You are running the most recent version. (","cyan","","v" .. currentVerStr .. "","white","",")")
     elseif (remoteVersion < currentVersion) then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You have a newer version than is publicly available. (","cyan","","v" .. currentVerStr .. "","white","",")")
     elseif (update_mode == "check") then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You are running ","cyan","","v" .. currentVerStr .. "","white",""," , but there's a newer version ","cyan","","v" .. remoteVerStr)
     elseif (update_mode == "install") then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," Updating plugin from version ","cyan","", currentVerStr .. "","white",""," to version ","cyan","", remoteVerStr .."") 
 
         local pluginFile = GetPluginInfo(GetPluginID(), 6)
         local file = io.open(pluginFile, "wb")
         file:write(pluginData)
         file:close()
         reload_plugin()
     else
         ColourNote("red", "", plugin_prefix .. " Invalid update mode: " .. update_mode)
     end
 end
 ----------------------- End Plugin Update Code -----------------------

]]>
</script> 

</muclient>
