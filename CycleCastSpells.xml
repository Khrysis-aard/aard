<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Sunday, December 15, 2024, 11:14 PM -->
<!-- MuClient version 5.07-pre -->

<muclient>
<plugin
   name="CycleCastSpells"
   author="Khrysis"
   id="74b124cb16d29c3f9a369ae4"
   language="Lua"
   purpose="cycle atks in lists you create"
   save_state="y"
   date_written="2024-12-15 23:12:46"
   requires="5.07"
   version="1.04"
   >
   <description trim="y">
<![CDATA[
=========================================================================================================

cc help : to show this help file

cc add <spellname> <group> : to add spells to list with their group type 
                 ex: cc add fireball fire (usage cc fire)
				 ex: cc add fireball a    (usage cc a)
				 ex: cc add dispel bad    (usage cc bad)
				 

cc rem <spellname> <group> : to remove spells from list by spellname and element type

cc list : to show the list of spells for the each element type

cc <group> : to cast spells of the given element in the order of the list, one at a time

ccx <group> <mobname> : to start fights or cast at specific mobs using the list used

cc clear <group> : to clear all spells for the given element (e.g., cc clear fire)

cc clear all : to clear all categories and spells

cc update check : to check for updates

cc update install : to install new update

=========================================================================================================
]]>
</description>

</plugin>

<aliases>
  <alias 
  match="cc update check" 
  enabled="y" 
  script="update_check_alias" 
  sequence="99"
  >
  </alias>
  
  <alias 
  match="cc update install" 
  enabled="y" 
  script="update_install_alias" 
  sequence="99"
  >
  </alias>
  
  <alias
   script="OnHelp"
   match="^cc help$"
   enabled="y" regexp="y" sequence="100" ignore_case="y"
  >
  </alias>
  
  <alias
   match="^cc list$"
   enabled="y" 
   send_to="12"
   regexp="y" 
   sequence="100" 
   ignore_case="y"
  >
  <send> 
      -- Check if there are any elements in the spellsTable
      if next(spellsTable) == nil then
          Note("No spells have been added to any element yet.")
      else
          -- List all categories (element types) and their spells
          for element, spells in pairs(spellsTable) do
              if #spells > 0 then
                  Note("Spells for " .. element .. ": " .. table.concat(spells, ", "))
              else
                  Note("No spells found for " .. element .. " element.")
              end
          end
      end
  </send>
  </alias>
  
  <alias
   match="^cc add (.*) (.*)$"
   enabled="y"
   send_to="12"
   expand_variables="y"
   sequence="100"
   regexp="y"
  >
  <send>
        -- Get the spell name and element from the input
        local spell = "%1"
        local element = "%2"
        
        -- Check if a spell name and element were provided
        if spell == "" or element == "" then
            Note("Please provide both spell name and element type.")
        else
            -- Initialize the element list if it doesn't exist
            if not spellsTable[element] then
                spellsTable[element] = {}
            end
            
            -- Check if the spell is already in the list for that element
            local exists = false
            for _, v in ipairs(spellsTable[element]) do
                if v == spell then
                    exists = true
                    break
                end
            end

            if exists then
                Note("Spell '" .. spell .. "' is already in the " .. element .. " list.")
            else
                -- Add the spell to the list for the given element
                table.insert(spellsTable[element], spell)
                Note("Spell '" .. spell .. "' has been added to the " .. element .. " list.")
            end
        end
  </send>
  </alias>
  
  <alias
   match="^cc rem (.*) (.*)$"
   enabled="y" 
   send_to="12"
   expand_variables="y"
   regexp="y" 
   sequence="100"
   ignore_case="y"
  >
  <send>
        -- Get the spell name and element from the input
        local spell = "%1"
        local element = "%2"
        
        -- Check if a spell name and element were provided
        if spell == "" or element == "" then
            Note("Please provide both spell name and element type to remove.")
        else
            -- Check if the element exists in the table
            if spellsTable[element] then
                -- Search for the spell in the list and remove it
                local foundIndex = nil
                for i, v in ipairs(spellsTable[element]) do
                    if v == spell then
                        foundIndex = i
                        break
                    end
                end

                if foundIndex then
                    -- Remove the spell at the found index
                    table.remove(spellsTable[element], foundIndex)
                    Note("Spell '" .. spell .. "' has been removed from the " .. element .. " list.")
                else
                    Note("Spell '" .. spell .. "' not found in the " .. element .. " list.")
                end
            else
                Note("No spells found for the " .. element .. " element.")
            end
        end
  </send>
  </alias>

  <alias
   match="^cc clear (.*)$"
   enabled="y"
   send_to="12"
   expand_variables="y"
   sequence="100"
   regexp="y"
   ignore_case="y"
  >
  <send>
        -- Get the element (category) from the input
        local element = "%1"
        
        -- Check if the element exists in the spellsTable
        if element == "all" then
            -- Clear all categories
            spellsTable = {}
            Note("All categories have been cleared.")
        else
            -- Clear the specific category (element)
            if spellsTable[element] then
                spellsTable[element] = nil  -- Remove the spells for that category
                Note("All spells for " .. element .. " have been cleared.")
            else
                Note("No spells found for " .. element .. " element to clear.")
            end
        end
  </send>
</alias>

  <alias
   match="^cc (?!help|add|rem|list|clear)(.*)$"
   enabled="y"
   send_to="12"
   expand_variables="y"
   sequence="100"
   regexp="y"
   ignore_case="y"
>
  <send>
        -- Get the element name from the input
        local element = "%1"
        
        -- Initialize currentIndex for the element if it doesn't exist
        currentIndexes[element] = currentIndexes[element] or 1

        -- Check if the element has spells
        if spellsTable[element] then
            -- Get the current spell from the table using the current index for that element
            local spell = spellsTable[element][currentIndexes[element]]
            
            -- Cast the current spell using its name
            Send("cast '" .. spell .. "'")

            -- Notify the user
            Note("Casting spell: " .. spell)

            -- Move to the next spell in the list (cycle through)
            currentIndexes[element] = currentIndexes[element] + 1
            if currentIndexes[element] > #spellsTable[element] then
                currentIndexes[element] = 1  -- Reset to the first spell if we reached the end
            end
        else
            Note("No spells found for " .. element .. " element.")
        end
  </send>
</alias>

<alias
   match="^ccx (.*) (.*)$"
   enabled="y"
   send_to="12"
   expand_variables="y"
   sequence="100"
   regexp="y"
   ignore_case="y"
>
  <send>
        -- Get the element and mobname from the input
        local element = "%1"
		local mobname = "%2"
        
        -- Initialize currentIndex for the element if it doesn't exist
        currentIndexes[element] = currentIndexes[element] or 1

        -- Check if the element has spells
        if spellsTable[element] then
            -- Get the current spell from the table using the current index for that element
            local spell = spellsTable[element][currentIndexes[element]]
            
            -- Cast the current spell using its name
            Send("cast '" .. spell .. "' ".. mobname)

            -- Notify the user
            Note("Casting spell: " .. spell)

            -- Move to the next spell in the list (cycle through)
            currentIndexes[element] = currentIndexes[element] + 1
            if currentIndexes[element] > #spellsTable[element] then
                currentIndexes[element] = 1  -- Reset to the first spell if we reached the end
            end
        else
            Note("No spells found for " .. element .. " element.")
        end
  </send>
</alias>

</aliases>

<script>
<![CDATA[
require "serialize"

spellsTable = {}  -- A table to store spells by their element type
currentIndexes = {}  -- A table to store current indexes for each element

function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

function OnPluginSaveState ()
  -- Save both spellsTable and currentIndexes
  SetVariable("spellsTable", "spellsTable = " .. serialize.save_simple(spellsTable))
  SetVariable("currentIndexes", "currentIndexes = " .. serialize.save_simple(currentIndexes))
end

function OnPluginInstall ()
  ColourNote("blue", "yellow", "Plugin Installed! Type cc help - to show help")
  assert(loadstring(GetVariable("spellsTable") or ""))()
  assert(loadstring(GetVariable("currentIndexes") or ""))()
end

 ----------------------- Plugin Update Code -----------------------
 -- Code taken from Durel's dinv plugin, originally via Crowley
 require("wait")
require("async")
json = require("json")

 plugin_url = "https://raw.githubusercontent.com/Khrysis-aard/plugins/refs/heads/main/CycleCastSpells.xml"
 SetVariable("DownloadURL", plugin_url)
 plugin_protocol = "HTTPS"
 plugin_prefix = "[CycleCastSpells]"
 
 function update_check_alias()
     update_plugin("check")
     ColourNote("yellow", "", plugin_prefix .. "","white",""," Checking for updated version...")
 end
 
 function update_install_alias()
     update_plugin("install")
     ColourNote("yellow", "", plugin_prefix .. "","white",""," Checking for and installing updated version...")
 end
 
 function reload_plugin()
     local scriptPrefix = GetAlphaOption("script_prefix")
     local retval
 
     -- If the user has not already specified the script prefix for this version of mush, pick a
     -- reasonable default value
     if (scriptPrefix == "") then
         scriptPrefix = "\\\\\\"
         SetAlphaOption("script_prefix", scriptPrefix)
     end
 
     -- Tell mush to reload the plugin in one second.  We can't do it directly here because a
     -- plugin can't unload itself.  Even if it could, how could it tell mush to load it again
     -- if it weren't installed? 
     retval = Execute(scriptPrefix.."DoAfterSpecial(0.1, \"ReloadPlugin('"..GetPluginID().."')\", sendto.script)")
 end
 
 function update_plugin(mode)
     update_mode = mode
 
     wait.make(get_plugin_file)
 end
 
 function get_plugin_file()
     local urlThread = async.request(plugin_url, plugin_protocol)
 
     if not urlThread then
         note_error("Couldn't create async url request.")
         return
     end
 
     local timeout = 10
     local totTime = 0
     while (urlThread:alive() and totTime < timeout) do
         wait.time(0.1)
         totTime = totTime + 0.1
     end
 
     local remoteRet, pluginData, status, headers, fullStatus = urlThread:join()
 
     if not status then
         ColourNote("red", "", plugin_prefix .. " Couldn't download plugin file. No status code.")
         
         return
     end
 
     if (status ~= 200) then
         ColourNote("red", "", plugin_prefix .. " Plugin file request status code: " .. status .. ": " .. fullStatus)
         return
     end
     
     local currentVersion = GetPluginInfo(GetPluginID(), 19) or 0
     local currentVerStr  = string.format("%1.3f", currentVersion)
     local remoteVerStr   = string.match(pluginData, '%s%s+version="([0-9%.]+)"')
     local remoteVersion  = tonumber(remoteVerStr or "") or 0
 
     if remoteVersion == currentVersion then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You are running the most recent version. (","cyan","","v" .. currentVerStr .. "","white","",")")
     elseif (remoteVersion < currentVersion) then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You have a newer version than is publicly available. (","cyan","","v" .. currentVerStr .. "","white","",")")
     elseif (update_mode == "check") then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," You are running ","cyan","","v" .. currentVerStr .. "","white",""," , but there's a newer version ","cyan","","v" .. remoteVerStr)
     elseif (update_mode == "install") then
         ColourNote("yellow", "", plugin_prefix .. "","white",""," Updating plugin from version ","cyan","", currentVerStr .. "","white",""," to version ","cyan","", remoteVerStr .."") 
 
         local pluginFile = GetPluginInfo(GetPluginID(), 6)
         local file = io.open(pluginFile, "wb")
         file:write(pluginData)
         file:close()
         reload_plugin()
     else
         ColourNote("red", "", plugin_prefix .. " Invalid update mode: " .. update_mode)
     end
 end
 ----------------------- End Plugin Update Code -----------------------
]]>
</script>

</muclient>
